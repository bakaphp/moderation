name: "Tests"

# This is a basic workflow this are the triggered

on: [push, pull_request]

jobs:
  run-tests:
    name: PHP ${{ matrix.php-versions }}
    runs-on: ubuntu-18.04
    env:
      extensions: mbstring, intl, json, phalcon4, mysql, pgsql, xdebug, mongodb, redis
      key: cache-v0.0.2
      DATA_API_MYSQL_HOST: 127.0.0.1
      DATA_API_MYSQL_USER: root
      DATA_API_MYSQL_PASS: password
      DATA_API_MYSQL_NAME: kanvas_content
      WORKFLOW_CORE_PATH: ./
      DATA_API_MEMCACHED_HOST: 127.0.0.1
      DATA_API_MEMCACHED_PORT: 11211
      DATA_API_MEMCACHED_WEIGHT: 100
      EMAIL_USER: ${{ secrets.EMAIL_USER }}
      EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
      REDIS_HOST: 127.0.0.1
      REDIS_PORT: 6379
      ELASTIC_HOST: 127.0.0.1:9200
      APP_IP: api.kanvas.ld
      APP_ENV: development
      PHINX_CONFIG_DIR: storage
      RECOMBEE_PRIVATE_TOKEN: ${{ secrets.RECOMBEE_PRIVATE_TOKEN }}
      CANVAS_PHINX_CONFIG_DIR: vendor/canvas/core/storage
    services:
      mysql:
        image: mariadb:10.4
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: kanvas_content
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      rabbitmq:
        image: rabbitmq
        ports:
          - 5672:5672
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.9.2
        env:
          discovery.type: single-node
        options: >-
          --health-cmd "curl http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
        # <port on host>:<port on container>
        - 9200:9200
    strategy:
      fail-fast: false
      matrix:
        php-versions: ['7.4']
    steps:
      - uses: actions/checkout@v1

      - name: Setup cache environment
        id: cache-env
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          key: ${{ env.key }}

      - name: Cache extensions
        uses: actions/cache@v1
        with:
          path: ${{ steps.cache-env.outputs.dir }}
          key: ${{ steps.cache-env.outputs.key }}
          restore-keys: ${{ steps.cache-env.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          tools: pecl

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-suggest

      - name: Update Composer dependencies
        run: composer update --prefer-dist --no-suggest

      - name: Setup Kanvas Env Variable
        run: cp storage/ci/.env.example .env
      
      - name: Setup Kanvas Phinx
        run: cp vendor/canvas/core/storage/ci/phinx.php.example kanvas-phinx.php

      - name: Phinx migrate Kanvas
        run: vendor/bin/phinx migrate -c kanvas-phinx.php

      - name: Phinx Migrate Kanvas Seed
        run: vendor/bin/phinx seed:run -c kanvas-phinx.php

      - name: Setup Env Variable
        run: cp storage/ci/.env.example .env

      - name: Run test
        if: success()
        run: vendor/bin/codecept run